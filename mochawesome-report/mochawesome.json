{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 6,
    "pending": 0,
    "failures": 1,
    "start": "2020-09-16T13:13:58.301Z",
    "end": "2020-09-16T13:14:05.224Z",
    "duration": 6923,
    "testsRegistered": 7,
    "passPercent": 85.71428571428571,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8bd2e820-6e06-4d0c-84e0-62bd087e3d05",
      "title": "",
      "fullFile": "cypress/integration/examples/network_requests.spec.js",
      "file": "cypress/integration/examples/network_requests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "90ca77ed-e808-4696-87ca-ce8af5985f66",
          "title": "Network Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.server() - control behavior of network requests and responses",
              "fullTitle": "Network Requests cy.server() - control behavior of network requests and responses",
              "timedOut": null,
              "duration": 860,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/server\ncy.server().should(function (server) {\n  // the default options on server\n  // you can override any of these options\n  expect(server.delay).to.eq(0);\n  expect(server.method).to.eq('GET');\n  expect(server.status).to.eq(200);\n  expect(server.headers).to.be.null;\n  expect(server.response).to.be.null;\n  expect(server.onRequest).to.be.undefined;\n  expect(server.onResponse).to.be.undefined;\n  expect(server.onAbort).to.be.undefined; // These options control the server behavior\n  // affecting all requests\n  // pass false to disable existing route stubs\n  expect(server.enable).to.be.true; // forces requests that don't match your routes to 404\n  expect(server.force404).to.be.false; // whitelists requests from ever being logged or stubbed\n  expect(server.whitelist).to.be.a('function');\n});\ncy.server({\n  method: 'POST',\n  delay: 1000,\n  status: 422,\n  response: {}\n}); // any route commands will now inherit the above options\n// from the server. anything we pass specifically\n// to route will override the defaults though.",
              "err": {
                "message": "AssertionError: expected undefined to be a function",
                "estack": "AssertionError: expected undefined to be a function\n    at Context.eval (https://example.cypress.io/__cypress/tests?p=cypress/integration/examples/network_requests.spec.js:157:38)",
                "diff": null
              },
              "uuid": "749eea90-2d33-449e-b4d5-e4bcd4647d1f",
              "parentUUID": "90ca77ed-e808-4696-87ca-ce8af5985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 697,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments').should(function (response) {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.length(500);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "d684452b-1bfd-458e-8292-82a500e34e19",
              "parentUUID": "90ca77ed-e808-4696-87ca-ce8af5985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments').then(function (response) {\n  // https://on.cypress.io/assertions\n  expect(response).property('status').to.equal(200);\n  expect(response).property('body').to.have.length(500);\n  expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "046ab6b4-7849-4821-962e-4756c92d2684",
              "parentUUID": "90ca77ed-e808-4696-87ca-ce8af5985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 453,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: 'https://jsonplaceholder.cypress.io/comments',\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n.should('contain', {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "e7a017e0-57be-4267-9e5f-81c89f2fada2",
              "parentUUID": "90ca77ed-e808-4696-87ca-ce8af5985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 792,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n.its('0') // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(function (user) {\n  expect(user).property('id').to.be.a('number'); // make a new post on behalf of the user\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  });\n}) // note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(function (response) {\n  expect(response).property('status').to.equal(201); // new entity created\n  expect(response).property('body').to.contain({\n    id: 101,\n    // there are already 100 posts, so new entity gets id 101\n    title: 'Cypress Test Runner'\n  }); // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "8abc52eb-ea1a-4edc-8a09-aeebb8052819",
              "parentUUID": "90ca77ed-e808-4696-87ca-ce8af5985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 906,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n.as('user') // saves the object in the test context\n.then(function () {\n  // NOTE ðŸ‘€\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: this.user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  }).its('body').as('post'); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "6712f99f-82f1-462a-baf3-c1e61ecdf04c",
              "parentUUID": "90ca77ed-e808-4696-87ca-ce8af5985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.route() - route responses to matching requests",
              "fullTitle": "Network Requests cy.route() - route responses to matching requests",
              "timedOut": null,
              "duration": 1607,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/route\nvar message = 'whoa, this comment does not exist';\ncy.server(); // Listen to GET to comments/1\ncy.route('GET', 'comments/*').as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click(); // https://on.cypress.io/wait\ncy.wait('@getComment').its('status').should('eq', 200); // Listen to POST to comments\ncy.route('POST', '/comments').as('postComment'); // we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(function (xhr) {\n  expect(xhr.requestBody).to.include('email');\n  expect(xhr.requestHeaders).to.have.property('Content-Type');\n  expect(xhr.responseBody).to.have.property('name', 'Using POST in cy.route()');\n}); // Stub a response to PUT comments/ ****\ncy.route({\n  method: 'PUT',\n  url: 'comments/*',\n  status: 404,\n  response: {\n    error: message\n  },\n  delay: 500\n}).as('putComment'); // we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment'); // our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "dd23b2ce-f9c9-4128-ba44-3cd26878bc35",
              "parentUUID": "90ca77ed-e808-4696-87ca-ce8af5985f66",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d684452b-1bfd-458e-8292-82a500e34e19",
            "046ab6b4-7849-4821-962e-4756c92d2684",
            "e7a017e0-57be-4267-9e5f-81c89f2fada2",
            "8abc52eb-ea1a-4edc-8a09-aeebb8052819",
            "6712f99f-82f1-462a-baf3-c1e61ecdf04c",
            "dd23b2ce-f9c9-4128-ba44-3cd26878bc35"
          ],
          "failures": [
            "749eea90-2d33-449e-b4d5-e4bcd4647d1f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5977,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}